{
    "thread_id": "198e572acc4c31ff",
    "messages": [
        {
            "id": "198e578cf358966b",
            "from": "Nguyen Duyen <dynjjeo@gmail.com>",
            "to": "nguyenthiduyen1_t65@hus.edu.vn",
            "subject": "TEST",
            "date": "2025-08-26 08:22:35+00:00",
            "plain_text": "thanks for contacting me. the project is paid. along with the code u will\r\n\\r\\nget all documents and base paper. let me know if you want it.\r\n",
            "cc": [],
            "bcc": [],
            "labels_ids": [
                "SENT"
            ],
            "attachments": [
                {
                    "filename": "1803.03467v4.pdf",
                    "file_path": "outputs/198e572acc4c31ff_TEST/1803.03467v4.pdf",
                    "attachment_context": "## RippleNet: Propagating User Preferences on the Knowledge Graph for Recommender Systems\n\nHongwei Wang 1 , 2 , Fuzheng Zhang 3 , Jialin Wang 4 , Miao Zhao 4 , Wenjie Li 4 , Xing Xie 2 , Minyi Guo 1∗ 1 Shanghai Jiao Tong University, wanghongwei55@gmail.com, guo-my@cs.sjtu.edu.cn 2 Microsoft Research Asia, xingx@microsoft.com, 3 Meituan AI Lab, zhangfuzheng@meituan.com 4 The Hong Kong Polytechnic University, {csjlwang, csmiaozhao, cswjli}@comp.polyu.edu.hk\n\n## ABSTRACT\n\nTo address the sparsity and cold start problem of collaborative filtering, researchers usually make use of side information, such as social networks or item attributes, to improve recommendation performance. This paper considers the knowledge graph as the source of side information. To address the limitations of existing embeddingbased and path-based methods for knowledge-graph-aware recommendation, we propose RippleNet , an end-to-end framework that naturally incorporates the knowledge graph into recommender systems. Similar to actual ripples propagating on the water, RippleNet stimulates the propagation of user preferences over the set of knowledge entities by automatically and iteratively extending a user's potential interests along links in the knowledge graph. The multiple \"ripples\" activated by a user's historically clicked items are thus superposed to form the preference distribution of the user with respect to a candidate item, which could be used for predicting the final clicking probability. Through extensive experiments on real-world datasets, we demonstrate that RippleNet achieves substantial gains in a variety of scenarios, including movie, book and news recommendation, over several state-of-the-art baselines.\n\n## KEYWORDS\n\nRecommender systems; knowledge graph; preference propagation\n\n## ACMReference Format:\n\nHongwei Wang, Fuzheng Zhang, Jialin Wang, Miao Zhao, Wenjie Li, Xing Xie, and Minyi Guo. 2018. RippleNet: Propagating User Preferences on the Knowledge Graph for Recommender Systems. In The 27th ACM International Conference on Information and Knowledge Management (CIKM '18), October 22-26, 2018, Torino, Italy . ACM, New York, NY, USA, 10 pages. https://doi. org/10.1145/3269206.3271739\n\n## 1 INTRODUCTION\n\nThe explosive growth of online content and services has provided overwhelming choices for users, such as news, movies, music, restaurants, and books. Recommender systems (RS) intend to address the information explosion by finding a small set of items for\n\n∗ M. Guo is the corresponding author. This work was partially sponsored by the National Basic Research 973 Program of China under Grant 2015CB352403.\n\nPermission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for third-party components of this work must be honored. For all other uses, contact the owner/author(s).\n\nCIKM '18, October 22-26, 2018, Torino, Italy\n\n© 2018 Copyright held by the owner/author(s).\n\nACM ISBN 978-1-4503-6014-2/18/10.\n\nhttps://doi.org/10.1145/3269206.3271739\n\nFigure 1: Illustration of knowledge graph enhanced movie recommendersystems. The knowledge graph provides fruitful facts and connections among items, which are useful for improving precision, diversity, and explainability of recommended results.\n\n<!-- image -->\n\nusers to meet their personalized interests. Among recommendation strategies, collaborative filtering (CF), which considers users' historical interactions and makes recommendations based on their potential common preferences, has achieved great success [12]. However, CF-based methods usually suffer from the sparsity of user-item interactions and the cold start problem. To address these limitations, researchers have proposed incorporating side information into CF, such as social networks [9], user/item attributes [32], images [43] and contexts [25].\n\nAmong various types of side information, knowledge graph (KG) usually contains much more fruitful facts and connections about items. A KG is a type of directed heterogeneous graph in which nodes correspond to entities and edges correspond to relations . Recently, researchers have proposed several academic KGs, such as NELL 1 , DBpedia 2 , and commercial KGs, such as Google Knowledge Graph 3 and Microsoft Satori 4 . These knowledge graphs are successfully applied in many applications such as KG completion [14], question answering [7], word embedding [40], and text classification [34].\n\nInspired by the success of applying KG in a wide variety of tasks, researchers also tried to utilize KG to improve the performance of recommender systems. As shown in Figure 1, KG can benefit the recommendation from three aspects: (1) KG introduces semantic relatedness among items, which can help find their latent connections and improve the precision of recommended items; (2) KG\n\n1 http://rtw.ml.cmu.edu/rtw/\n\n2 http://wiki.dbpedia.org/\n\n3 https://www.google.com/intl/bn/insidesearch/features/search/knowledge.html\n\n4 https://searchengineland.com/library/bing/bing-satori\n\nconsists of relations with various types, which is helpful for extending a user's interests reasonably and increasing the diversity of recommended items; (3) KG connects a user's historical records and the recommended ones, thereby bringing explainability to recommender systems. In general, existing KG-aware recommendation can be classified into two categories:\n\nThe first category is embedding-based methods [32, 33, 43], which pre-process a KG with knowledge graph embedding (KGE) [35] algorithms and incorporates the learned entity embeddings into a recommendation framework. For example, Deep Knowledge-aware Network (DKN) [33] treats entity embeddings and word embeddings as different channels, then designs a CNN framework to combine them together for news recommendation. Collaborative Knowledge base Embedding (CKE) [43] combines a CF module with knowledge embedding, text embedding, and image embedding of items in a unified Bayesian framework. Signed Heterogeneous Information Network Embedding (SHINE) [32] designs deep autoencoders to embed sentiment networks, social networks and profile (knowledge) networks for celebrity recommendations. Embedding-based methods show high flexibility in utilizing KG to assist recommender systems, but the adopted KGE algorithms in these methods are usually more suitable for in-graph applications such as link prediction than for recommendation [35], thus the learned entity embeddings are less intuitive and effective to characterize inter-item relations.\n\nThe second category is path-based methods [42, 45], which explore the various patterns of connections among items in KG to provide additional guidance for recommendations. For example, Personalized Entity Recommendation (PER) [42] and Meta-Graph Based Recommendation [45] treat KG as a heterogeneous information network (HIN), and extract meta-path/meta-graph based latent features to represent the connectivity between users and items along different types of relation paths/graphs. Path-based methods make use of KG in a more natural and intuitive way, but they rely heavily on manually designed meta-paths, which is hard to optimize in practice. Another concern is that it is impossible to design hand-crafted meta-paths in certain scenarios (e.g., news recommendation) where entities and relations are not within one domain.\n\nTo address the limitations of existing methods, we propose RippleNet , an end-to-end framework for knowledge-graph-aware recommendation. RippleNet is designed for click-through rate (CTR) prediction, which takes a user-item pair as input and outputs the probability of the user engaging (e.g., clicking, browsing) the item. The key idea behind RippleNet is preference propagation : For each user, RippleNet treats his historical interests as a seed set in the KG, then extends the user's interests iteratively along KG links to discover his hierarchical potential interests with respect to a candidate item. We analogize preference propagation with actual ripples created by raindrops propagating on the water, in which multiple \"ripples\" superpose to form a resultant preference distribution of the user over the knowledge graph. The major difference between RippleNet and existing literature is that RippleNet combines the advantages of the above mentioned two types of methods: (1) RippleNet incorporates the KGE methods into recommendation naturally by preference propagation; (2) RippleNet can automatically discover possible paths from an item in a user's history to a candidate item, without any sort of hand-crafted design.\n\nEmpirically, we apply RippleNet to three real-world scenarios of movie, book, and news recommendations. The experiment results show that RippleNet achieves AUC gains of 2 . 0% to 40 . 6%, 2 . 5% to 17 . 4%, and 2 . 6% to 22 . 4% in movie, book, and news recommendations, respectively, compared with state-of-the-art baselines for recommendation. We also find that RippleNet provides a new perspective of explainability for the recommended results in terms of the knowledge graph.\n\nIn summary, our contributions in this paper are as follows:\n\n- To the best of our knowledge, this is the first work to combine embedding-based and path-based methods in KG-aware recommendation.\n- We propose RippleNet, an end-to-end framework utilizing KG to assist recommender systems. RippleNet automatically discovers users' hierarchical potential interests by iteratively propagating users' preferences in the KG.\n- We conduct experiments on three real-world recommendation scenarios, and the results prove the efficacy of RippleNet over several state-of-the-art baselines.\n\n## 2 PROBLEM FORMULATION\n\nThe knowledge-graph-aware recommendation problem is formulated as follows. In a typical recommender system, let U = { u 1 , u 2 , ... } and V = { v 1 , v 2 , ... } denote the sets of users and items, respectively. The user-item interaction matrix Y = { y uv | u ∈ U , v ∈ V} is defined according to users' implicit feedback, where\n\n<!-- formula-not-decoded -->\n\nA value of 1 for y uv indicates there is an implicit interaction between user u and item v , such as behaviors of clicking, watching, browsing, etc. In addition to the interaction matrix Y , we also have a knowledge graph G available, which consists of massive entityrelation-entity triples ( h , r , t ) . Here h ∈ E , r ∈ R , and t ∈ E denote the head, relation, and tail of a knowledge triple, respectively, E and R denote the set of entities and relations in the KG. For example, the triple ( Jurassic Park , film.film.director , Steven Spielberg ) states the fact that Steven Spielberg is the director of the film \"Jurassic Park\". In many recommendation scenarios, an item v ∈ V may associate with one or more entities in G . For example, the movie \"Jurassic Park\" is linked with its namesake in KG, while news with title \"France's Baby Panda Makes Public Debut\" is linked with entities \"France\" and \"panda\".\n\nGiven interaction matrix Y as well as knowledge graph G , we aim to predict whether user u has potential interest in item v with which he has had no interaction before. Our goal is to learn a prediction function ˆ y uv = F( u , v ; Θ ) , where ˆ y uv denotes the probability that user u will click item v , and Θ denotes the model parameters of function F .\n\n## 3 RIPPLENET\n\nIn this section, we discuss the proposed RippleNet in detail. We also give some discussions on the model and introduce the related work.\n\n## 3.1 Framework\n\nThe framework of RippleNet is illustrated in Figure 2. RippleNet takes a user u and an item v as input, and outputs the predicted probability that user u will click item v . For the input user u , his historical set of interests V u is treated as seeds in the KG, then extended along links to form multiple ripple sets S k u ( k = 1 , 2 , ..., H ). A ripple set S k u is the set of knowledge triples that are k -hop(s) away from the seed set V u . These ripple sets are used to interact with the item embedding (the yellow block) iteratively for obtaining the responses of user u with respect to item v (the green blocks), which are then combined to form the final user embedding (the grey block). Lastly, we use the embeddings of user u and item v together to compute the predicted probability ˆ y uv .\n\n## 3.2 Ripple Set\n\nA knowledge graph usually contains fruitful facts and connections among entities. For example, as illustrated in Figure 3, the film \"Forrest Gump\" is linked with \"Robert Zemeckis\" (director), \"Tom Hanks\" (star), \"U.S.\" (country) and \"Drama\" (genre), while \"Tom Hanks\" is further linked with films \"The Terminal\" and \"Cast Away\" which he starred in. These complicated connections in KG provide us a deep and latent perspective to explore user preferences. For example, if a user has ever watched \"Forrest Gump\", he may possibly become a fan of Tom Hanks and be interested in \"The Terminal\" or \"Cast Away\". To characterize users' hierarchically extended preferences in terms of KG, in RippleNet, we recursively define the set of k -hop relevant entities for user u as follows:\n\nDefinition 1 (relevant entity). Given interaction matrix Y and knowledge graph G , the set of k -hop relevant entities for user u is defined as\n\n<!-- formula-not-decoded -->\n\nwhere E 0 u = V u = { v | y uv = 1 } is the set of user's clicked items in the past, which can be seen as the seed set of user u in KG.\n\nRelevant entities can be regarded as natural extensions of a user's historical interests with respect to the KG. Given the definition of relevant entities, we then define the k -hop ripple set of user u as follows:\n\nDefinition 2 (ripple set). The k -hop ripple set of user u is defined as the set of knowledge triples starting from E k -1 u :\n\n<!-- formula-not-decoded -->\n\nThe word \"ripple\" has two meanings: (1) Analogous to real ripples created by multiple raindrops, a user's potential interest in entities is activated by his historical preferences, then propagates along the links in KG layer by layer, from near to distant. We visualize the analogy by the concentric circles illustrated in Figure 3. (2) The strength of a user's potential preferences in ripple sets weakens with the increase of the hop number k , which is similar to the gradually attenuated amplitude of real ripples. The fading blue in\n\nFigure 3 shows the decreasing relatedness between the center and surrounding entities.\n\nOne concern about ripple sets is their sizes may get too large with the increase of hop number k . To address the concern, note that: (1) A large number of entities in a real KG are sink entities , meaning they only have incoming links but no outgoing links, such as \"2004\" and \"PG-13\" in Figure 3. (2) In specific recommendation scenarios such as movie or book recommendations, relations can be limited to scenario-related categories to reduce the size of ripple sets and improve relevance among entities. For example, in Figure 3, all relations are movie-related and contain the word \"film\" in their names. (3) The number of maximal hop H is usually not too large in practice, since entities that are too distant from a user's history may bring more noise than positive signals. We will discuss the choice of H in the experiments part. (4) In RippleNet, we can sample a fixed-size set of neighbors instead of using a full ripple set to further reduce the computation overhead. Designing such samplers is an important direction of future work, especially the non-uniform samplers for better capturing user's hierarchical potential interests.\n\n## 3.3 Preference Propagation\n\nTraditional CF-based methods and their variants [11, 31] learn latent representations of users and items, then predict unknown ratings by directly applying a specific function to their representations such as inner product. In RippleNet, to model the interactions between users and items in a more fine-grained way, we propose a preference propagation technique to explore users' potential interests in his ripple sets.\n\nAs shown in Figure 2, each item v is associated with an item embedding v ∈ R d , where d is the dimension of embeddings. Item embedding can incorporate one-hot ID [11], attributes [32], bagof-words [33] or context information [25] of an item, based on the application scenario. Given the item embedding v and the 1-hop ripple set S 1 u of user u , each triple ( h i , r i , t i ) in S 1 u is assigned a relevance probability by comparing item v to the head h i and the relation r i in this triple:\n\n<!-- formula-not-decoded -->\n\nwhere R i ∈ R d × d and h i ∈ R d are the embeddings of relation r i and head h i , respectively. The relevance probability p i can be regarded as the similarity of item v and the entity h i measured in the space of relation R i . Note that it is necessary to take the embedding matrix R i into consideration when calculating the relevance of item v and entity h i , since an item-entity pair may have different similarities when measured by different relations. For example, \"Forrest Gump\" and \"Cast Away\" are highly similar when considering their directors or stars, but have less in common if measured by genre or writer.\n\nAfter obtaining the relevance probabilities, we take the sum of tails in S 1 u weighted by the corresponding relevance probabilities, and the vector o 1 u is returned:\n\n<!-- formula-not-decoded -->\n\nwhere t i ∈ R d is the embedding of tail t i . Vector o 1 u can be seen as the 1-order response of user u 's click history V u with respect to item\n\nFigure 2: The overall framework of the RippleNet. It takes one user and one item as input, and outputs the predicted probability that the user will click the item. The KGs in the upper part illustrate the corresponding ripple sets activated by the user's click history.\n\n<!-- image -->\n\nFigure 3: Illustration of ripple sets of \"Forrest Gump\" in KG of movies. The concentric circles denotes the ripple sets with different hops. The fading blue indicates decreasing relatedness between the center and surrounding entities.Note that the ripple sets of different hops are not necessarily disjoint in practice.\n\n<!-- image -->\n\nv . This is similar to item-based CF methods [11, 33], in which a user is represented by his related items rather than a independent feature vector to reduce the size of parameters. Through the operations in Eq. (4) and Eq. (5), a user's interests are transferred from his history set V u to the set of his 1-hop relevant entities E 1 u along the links in S 1 u , which is called preference propagation in RippleNet.\n\nNote that by replacing v with o 1 u in Eq. (4), we can repeat the procedure of preference propagation to obtain user u 's 2-order response o 2 u , and the procedure can be performed iteratively on user u 's ripple sets S i u for i = 1 , ..., H . Therefore, a user's preference is propagated up to H hops away from his click history, and we observe multiple responses of user u with different orders: o 1 u , o 2 u , ..., o H u . The embedding of user u with respect to item v is calculated by combining the responses of all orders:\n\n<!-- formula-not-decoded -->\n\nNote that though the user response of last hop o H u contains all the information from previous hops theoretically, it is still necessary to incorporate o k u of small hops k in calculating user embedding since they may be diluted in o H u . Finally, the user embedding and item embedding are combined to output the predicted clicking probability:\n\n<!-- formula-not-decoded -->\n\nwhere σ ( x ) = 1 1 + exp (-x ) is the sigmoid function.\n\n## 3.4 Learning Algorithm\n\nIn RippleNet, we intend to maximize the following posterior probability of model parameters Θ after observing the knowledge graph G and the matrix of implicit feedback Y :\n\n<!-- formula-not-decoded -->\n\nwhere Θ includes the embeddings of all entities, relations and items. This is equivalent to maximizing\n\n<!-- formula-not-decoded -->\n\naccording to Bayes' theorem. In Eq. (9), the first term p ( Θ ) measures the priori probability of model parameters Θ . Following [43], we set p ( Θ ) as Gaussian distribution with zero mean and a diagonal covariance matrix:\n\n<!-- formula-not-decoded -->\n\nThe second item in Eq. (9) is the likelihood function of the observed knowledge graph G given Θ . Recently, researchers have proposed a great many knowledge graph embedding methods, including translational distance models [3, 14] and semantic matching models [15, 19] (We will continue the discussion on KGE methods in Section 3.6.3). In RippleNet, we use a three-way tensor factorization method to define the likelihood function for KGE:\n\n<!-- formula-not-decoded -->\n\nAlgorithm 1 Learning algorithm for RippleNet\n\nInput: Interaction matrix Y , knowledge graph G\n\nOutput: Prediction function F( u , v | Θ )\n\n- 1: Initialize all parameters\n- 2: Calculate ripple sets {S k u } H = 1 for each user u ;\n- k 3: for number of training iteration do\n- 4: Sample minibatch of positive and negative interactions from Y ;\n- 5: Sample minibatch of true and false triples from G ;\n- 6: Calculate gradients ∂ L/ ∂ V , ∂ L/ ∂ E , { ∂ L/ ∂ R } r ∈R , and { ∂ L/ ∂ α i } H i = 1 on the minibatch by back-propagation according to Eq. (4)-(13);\n- 7: Update V , E , { R } r ∈R , and { α i } H i = 1 by gradient descent with learning rate η ;\n- 8: end for\n- 9: return F( u , v | Θ )\n\nwhere the indicator I h , r , t equals 1 if ( h , r , t ) ∈ G and is 0 otherwise. Based on the definition in Eq. (11), the scoring functions of entityentity pairs in KGE and item-entity pairs in preference propagation can thus be unified under the same calculation model. The last term in Eq. (9) is the likelihood function of the observed implicit feedback given Θ and the KG, which is defined as the product of Bernouli distributions:\n\n<!-- formula-not-decoded -->\n\nbased on Eq. (2)-(7).\n\nTaking the negative logarithm of Eq. (9), we have the following loss function for RippleNet:\n\nmin\n\n<!-- formula-not-decoded -->\n\nwhere V and E are the embedding matrices for all items and entities, respectively, I r is the slice of the indicator tensor I in KG for relation r , and R is the embedding matrix of relation r . In Eq. (13), The first term measures the cross-entropy loss between ground truth of interactions Y and predicted value by RippleNet, the second term measures the squared error between the ground truth of the KG I r and the reconstructed indicator matrix E T RE , and the third term is the regularizer for preventing over-fitting.\n\nIt is intractable to solve the above objection directly, therefore, we employ a stochastic gradient descent (SGD) algorithm to iteratively optimize the loss function. The learning algorithm of RippleNet is presented in Algorithm 1. In each training iteration, to make the computation more efficient, we randomly sample a minibatch of positive/negative interactions from Y and true/false triples from G following the negative sampling strategy in [16]. Then we calculate the gradients of the loss L with respect to model parameters Θ , and update all parameters by back-propagation based on the sampled minibatch. We will discuss the choice of hyper-parameters in the experiments section.\n\n## 3.5 Discussion\n\n3.5.1 Explainability. Explainable recommender systems [27] aim to reveal why a user might like a particular item, which helps improve their acceptance or satisfaction of recommendations and increase trust in RS. The explanations are usually based on community tags [29], social networks [23], aspect [2], and phrase sentiment [44] Since RippleNet explores users' interests based on the KG, it provides a new point of view of explainability by tracking the paths from a user's history to an item with high relevance probability (Eq. (4)) in the KG. For example, a user's interest in film\n\n\"Back to the Future\" might be explained by the path \" user watched - - - - - - - - → Forrest Gump directed by - - - - - - - - - - - → Robert Zemeckis directs - - - - - - - → Back to the Future \", if the item \"Back to the Future\" is of high relevance probability with \"Forrest Gump\" and \"Robert Zemeckis\" in the user's 1-hop and 2-hop ripple set, respectively. Note that different from pathbased methods [42, 45] where the patterns of path are manually designed, RippleNet automatically discovers the possible explanation paths according to relevance probability. We will further present a visualized example in the experiments section to intuitively demonstrate the explainability of RippleNet.\n\n3.5.2 Ripple Superposition. A common phenomenon in RippleNet is that a user's ripple sets may be large in size, which dilutes his potential interests inevitably in preference propagation. However, we observe that relevant entities of different items in a user's click history often highly overlap. In other words, an entity could be reached by multiple paths in the KG starting from a user's click history. For example, \"Saving Private Ryan\" is connected to a user who has watched \"The Terminal\", \"Jurassic Park\" and \"Braveheart\" through actor \"Tom Hanks\", director \"Steven Spielberg\" and genre \"War\", respectively. These parallel paths greatly increase a user's interests in overlapped entities. We refer to the case as ripple superposition , as it is analogous to the interference phenomenon in physics in which two waves superpose to form a resultant wave of greater amplitude in particular areas. The phenomenon of ripple superposition is illustrated in the second KG in Figure 2, where the darker red around the two lower middle entities indicates higher strength of the user's possible interests. We will also discuss ripple superposition in the experiments section.\n\n## 3.6 Links to Existing Work\n\nHere we continue our discussion on related work and make comparisons with existing techniques in a greater scope.\n\n3.6.1 Attention Mechanism. The attention mechanism was originally proposed in image classification [18] and machine translation [1], which aims to learn where to find the most relevant part of the input automatically as it is performing the task. The idea was soon transplanted to recommender systems [4, 22, 33, 36, 47]. For example, DADM [4] considers factors of specialty and date when assigning attention values to articles for recommendation; D-Attn [22] proposes an interpretable and dual attention-based CNN model that combines review text and ratings for product rating prediction; DKN [33] uses an attention network to calculate the weight between a user's clicked item and a candidate item to dynamically aggregate the user's historical interests. RippleNet can be viewed as a special case of attention where tails are averaged weighted by similarities between their associated heads, tails, and certain item. The difference between our work and literature is that RippleNet designs a multi-level attention module based on knowledge triples for preference propagation.\n\n3.6.2 Memory Networks. Memory networks [17, 24, 38] is a recurrent attention model that utilizes an external memory module for question answering and language modeling. The iterative reading operations on the external memory enable memory networks to extract long-distance dependency in texts. Researchers have also proposed using memory networks in other tasks such as sentiment classification [13, 26] and recommendation [5, 8]. Note that these works usually focus on entry-level or sentence-level memories, while our work addresses entity-level connections in the KG, which is more fine-grained and intuitive when performing multi-hop iterations. In addition, our work also incorporates a KGE term as a regularizer for more stable and effective learning.\n\n3.6.3 Knowledge Graph Embedding. RippleNet also connects to a large body of work in KGE methods[3, 10, 14, 19, 28, 30, 37, 41]. KGE intends to embed entities and relations in a KG into continuous vector spaces while preserving its inherent structure. Readers can refer to [35] for a more comprehensive survey. KGE methods are mainly classified into two categories: (1) Translational distance models, such as TransE [3], TransH [37], TransD [10], and TransR [14], exploit distance-based scoring functions when learning representations of entities and relations. For example, TransE [3] wants h + r ≈ t when ( h , r , t ) holds, where h , r and t are the corresponding representation vector of h , r and t . Therefore, TransE assumes the score function f r ( h , t ) = ∥ h + r -t ∥ 2 2 is low if ( h , r , t ) holds, and high otherwise. (2) Semantic matching models, such as ANALOGY [19], ComplEx [28], and DisMult [41], measure plausibility of knowledge triples by matching latent semantics of entities and relations. For example, DisMult [41] introduces a vector embedding r ∈ R d and requires M r = diag ( r ) . The scoring function is hence defined as f r ( h , t ) = h ⊤ diag ( r ) t = ˝ d i = 1 [ r ] i · [ h ] i · [ t ] i . Researchers also propose incorporating auxiliary information, such as entity types [39], logic rules [21], and textual descriptions [46] to assist KGE. However, these methods are more suitable for in-graph applications such as link prediction or triple classification, according to their learning objectives. From this point of view, RippleNet can be seen as a specially designed KGE method that serves recommendation directly.\n\n## 4 EXPERIMENTS\n\nIn this section, we evaluate RippleNet on three real-world scenarios: movie, book, and news recommendations 5 . We first introduce the datasets, baselines, and experiment setup, then present the experiment results. We will also give a case study of visualization and discuss the choice of hyper-parameters in this section.\n\n## 4.1 Datasets\n\nWeutilize the following three datasets in our experiments for movie, book, and news recommendation:\n\n5 Experiment code is provided at https://github.com/hwwang55/RippleNet.\n\nTable 1: Basic statistics of the three datasets.\n\n|                 | MovieLens-1M   | Book-Crossing   | Bing-News   |\n|-----------------|----------------|-----------------|-------------|\n| # users         | 6,036          | 17,860          | 141,487     |\n| # items         | 2,445          | 14,967          | 535,145     |\n| # interactions  | 753,772        | 139,746         | 1,025,192   |\n| # 1-hop triples | 20,782         | 19,876          | 503,112     |\n| # 2-hop triples | 178,049        | 65,360          | 1,748,562   |\n| # 3-hop triples | 318,266        | 84,299          | 3,997,736   |\n| # 4-hop triples | 923,718        | 71,628          | 6,322,548   |\n\nTable 2: Hyper-parameter settings for the three datasets.\n\n| MovieLens-1M   | d = 16, H = 2, λ 1 = 10 - 7 , λ 2 = 0 . 01, η = 0 . 02   |\n|----------------|----------------------------------------------------------|\n| Book-Crossing  | d = 4, H = 3, λ 1 = 10 - 5 , λ 2 = 0 . 01, η = 0 . 001   |\n| Bing-News      | d = 32, H = 3, λ 1 = 10 - 5 , λ 2 = 0 . 05, η = 0 . 005  |\n\n- MovieLens-1M 6 is a widely used benchmark dataset in movie recommendations, which consists of approximately 1 million explicit ratings (ranging from 1 to 5) on the MovieLens website.\n- Book-Crossing dataset 7 contains 1,149,780 explicit ratings (ranging from 0 to 10) of books in the Book-Crossing community.\n- Bing-News dataset contains 1,025,192 pieces of implicit feedback collected from the server logs of Bing News 8 from October 16, 2016 to August 11, 2017. Each piece of news has a title and a snippet.\n\nSince MovieLens-1M and Book-Crossing are explicit feedback data, we transform them into implicit feedback where each entry is marked with 1 indicating that the user has rated the item (the threshold of rating is 4 for MovieLens-1M, while no threshold is set for Book-Crossing due to its sparsity), and sample an unwatched set marked as 0 for each user, which is of equal size with the rated ones. For MovieLens-1M and Book-Crossing, we use the ID embeddings of users and items as raw input, while for Bing-News, we concatenate the ID embedding of a piece of news and the averaged word embedding of its title as raw input for the item, since news titles are typically much longer than names of movies or books, hence providing more useful information for recommendation.\n\nWe use Microsoft Satori to construct the knowledge graph for each dataset. For MovieLens-1M and Book-Crossing, we first select a subset of triples from the whole KG whose relation name contains \"movie\" or \"book\" and the confidence level is greater than 0.9. Given the sub-KG, we collect IDs of all valid movies/books by matching their names with tail of triples ( head, film.film.name, tail ) or (head, book.book.title, tail) . For simplicity, items with no matched or multiple matched entities are excluded. We then match the IDs with the head and tail of all KG triples, select all well-matched triples from the sub-KG, and extend the set of entities iteratively up to four hops. The constructing process is similar for Bing-News except that: (1) we use entity linking tools to extract entities in news titles; (2) we do not impose restrictions on the names of relations since the entities in news titles are not within one particular domain. The basic statistics of the three datasets are presented in Table 1.\n\n6 https://grouplens.org/datasets/movielens/1m/\n\n7 http://www2.informatik.uni-freiburg.de/~cziegler/BX/\n\n8 https://www.bing.com/news\n\n<!-- image -->\n\nHop\n\n(a) MovieLens-1M\n\n<!-- image -->\n\n(b) Book-Crossing\n\n(d) Ratio of two average numbers\n\n<!-- image -->\n\n<!-- image -->\n\nFigure 4: The average number of k -hop neighbors that two items share in the KG w.r.t. whether they have common raters in (a) MovieLens-1M, (b) Book-Crossing, and (c) BingNewsdatasets. (d) The ratio of the two average numbers with different hops.\n\n## 4.2 Baselines\n\nWe compare the proposed RippleNet with the following state-ofthe-art baselines:\n\n- CKE [43] combines CF with structural knowledge, textual knowledge, and visual knowledge in a unified framework for recommendation. We implement CKE as CF plus structural knowledge module in this paper.\n- SHINE [32] designs deep autoencoders to embed a sentiment network, social network, and profile (knowledge) network for celebrity recommendation. Here we use autoencoders for user-item interaction and item profile to predict click probability.\n- DKN [33] treats entity embedding and word embedding as multiple channels and combines them together in CNN for CTR prediction. In this paper, we use movie/book names and news titles as textual input for DKN.\n- PER [42] treats the KG as HIN and extracts meta-path based features to represent the connectivity between users and items. In this paper, we use all item-attribute-item features for PER (e.g., 'movie-director-movie\").\n- LibFM [20] is a widely used feature-based factorization model in CTR scenarios. We concatenate user ID, item ID, and the corresponding averaged entity embeddings learned from TransR [14] as input for LibFM.\n- Wide &amp; Deep [6] is a general deep model for recommendation combining a (wide) linear channel with a (deep) nonlinear channel. Similar to LibFM, we use the embeddings of users, items, and entities to feed Wide&amp;Deep.\n\n## 4.3 Experiment Setup\n\nIn RippleNet, we set the hop number H = 2 for MovieLens-1M/BookCrossing and H = 3 for Bing-News. A larger number of hops hardly improves performance but does incur heavier computational overhead according to experiment results. The complete hyper-parameter settings are given in Table 2, where d denotes the dimension of embedding for items and the knowledge graph, and η denotes the learning rate. The hyper-parameters are determined by optimizing AUC on a validation set. For fair consideration, the latent dimensions of all compared baselines are set the same as in Table 2, while other hyper-parameters of baselines are set based on grid search.\n\nFor each dataset, the ratio of training, evaluation, and test set is 6 : 2 : 2. Each experiment is repeated 5 times, and the average performance is reported. We evaluate our method in two experiment scenarios: (1) In click-through rate (CTR) prediction, we apply the trained model to each piece of interactions in the test set and output the predicted click probability. We use Accuracy and AUC to evaluate the performance of CTR prediction. (2) In topK recommendation, we use the trained model to select K items with highest predicted click probability for each user in the test set, and choose Precision @ K , Recall @ K , F 1@ K to evaluate the recommended sets.\n\n## 4.4 Empirical Study\n\nWe conduct an empirical study to investigate the correlation between the average number of common neighbors of an item pair in the KG and whether they have common rater(s) in RS. For each dataset, we first randomly sample one million item pairs, then count the average number of k -hop neighbors that the two items share in the KG under the following two circumstances: (1) the two items have at least one common rater in RS; (2) the two items have no common rater in RS. The results are presented in Figures 4a, 4b, 4c, respectively, which clearly show that if two items have common rater(s) in RS, they likely share more common k -hop neighbors in the KG for fixed k . The above findings empirically demonstrate that the similarity of proximity structures of two items in the KG could assist in measuring their relatedness in RS . In addition, we plot the ratio of the two average numbers with different hops (i.e., dividing the higher bar by its immediate lower bar for each hop number) in Figure 4d, from which we observe that the proximity structures of two items under the two circumstances become more similar with the increase of the hop number. This is because any two items are probable to share a large amount of k -hop neighbors in the KG for a large k , even if there is no direct similarity between them in reality. The result motivates us to find a moderate hop number in RippleNet to explore users' potential interests as far as possible while avoiding introducing too much noise.\n\n## 4.5 Results\n\nThe results of all methods in CTR prediction and topK recommendation are presented in Table 3 and Figures 5, 6, 7, respectively. Several observations stand out:\n\n- CKEperformscomparably poorly than other baselines, which is probably because we only have structural knowledge available, without visual and textual input.\n- SHINE performs better in movie and book recommendation than news. This is because the 1-hop triples for news are too complicated when taken as profile input.\n\nFigure 5: Precision @ K , Recall @ K , and F 1@ K in topK recommendation for MovieLens-1M.\n\n<!-- image -->\n\n(a) Precision @ K\n\n<!-- image -->\n\n<!-- image -->\n\n(b)\n\n<!-- image -->\n\nRecall\n\n@\n\nK\n\n(c)\n\nF\n\n1@\n\nK\n\nFigure 6: Precision @ K , Recall @ K , and F 1@ K in topK recommendation for Book-Crossing.\n\n<!-- image -->\n\n(a)\n\n<!-- image -->\n\nPrecision\n\nK\n\n<!-- image -->\n\n(b)\n\nRecall\n\nK\n\n(c)\n\nF\n\n1@\n\nK\n\nFigure 7: Precision @ K , Recall @ K , and F 1@ K in topK recommendation for Bing-News.\n\nTable 3: The results of AUC and Accuracy in CTR prediction.\n\n| Model      | MovieLens-1M   | MovieLens-1M   | Book-Crossing   | Book-Crossing   | Bing-News   | Bing-News   |\n|------------|----------------|----------------|-----------------|-----------------|-------------|-------------|\n| Model      | AUC            | ACC            | AUC             | ACC             | AUC         | ACC         |\n| RippleNet* | 0.921          | 0.844          | 0.729           | 0.662           | 0.678       | 0.632       |\n| CKE        | 0.796          | 0.739          | 0.674           | 0.635           | 0.560       | 0.517       |\n| SHINE      | 0.778          | 0.732          | 0.668           | 0.631           | 0.554       | 0.537       |\n| DKN        | 0.655          | 0.589          | 0.621           | 0.598           | 0.661       | 0.604       |\n| PER        | 0.712          | 0.667          | 0.623           | 0.588           | -           | -           |\n| LibFM      | 0.892          | 0.812          | 0.685           | 0.639           | 0.644       | 0.588       |\n| Wide&Deep  | 0.903          | 0.822          | 0.711           | 0.623           | 0.654       | 0.595       |\n\n* Statistically significant improvements by unpaired two-sample t -test with p = 0 . 1.\n- DKNperforms best in news recommendation compared with other baselines, but performs worst in movie and book recommendation. This is because movie and book names are too short and ambiguous to provide useful information.\n- PER performs unsatisfactorily on movie and book recommendation because the user-defined meta-paths can hardly\n\nbe optimal. In addition, it cannot be applied in news recommendation since the types of entities and relations involved in news are too complicated to pre-define meta-paths.\n\n- Astwogeneric recommendation tools, LibFM and Wide&amp;Deep achieve satisfactory performance, demonstrating that they can make well use of knowledge from KG into their algorithms.\n- RippleNet performs best among all methods in the three datasets. Specifically, RippleNet outperforms baselines by 2 . 0% to 40 . 6%, 2 . 5% to 17 . 4%, and 2 . 6% to 22 . 4% on AUC in movie, book, and news recommendation, respectively. RippleNet also achieves outstanding performance in topK recommendation as shown in Figures 5, 6, and 7. Note that the performance of topK recommendation is much lower for Bing-News because the number of news is significantly larger than movies and books.\n\nSize of ripple set in each hop . We vary the size of a user's ripple set in each hop to further investigate the robustness of RippleNet. The results of AUC on the three datasets are presented in Table 4,\n\nTable 4: The results of AUC w.r.t. different sizes of a user's ripple set.\n\n| Size of ripple set   |     2 |     4 |     8 |    16 |    32 |    64 |\n|----------------------|-------|-------|-------|-------|-------|-------|\n| MovieLens-1M         | 0.903 | 0.908 | 0.911 | 0.918 | 0.92  | 0.919 |\n| Book-Crossing        | 0.694 | 0.696 | 0.708 | 0.726 | 0.706 | 0.711 |\n| Bing-News            | 0.659 | 0.672 | 0.67  | 0.673 | 0.678 | 0.671 |\n\nTable 5: The results of AUC w.r.t. different hop numbers.\n\n| Hop number H   |     1 |     2 |     3 |     4 |\n|----------------|-------|-------|-------|-------|\n| MovieLens-1M   | 0.916 | 0.919 | 0.915 | 0.918 |\n| Book-Crossing  | 0.727 | 0.722 | 0.73  | 0.702 |\n| Bing-News      | 0.662 | 0.676 | 0.679 | 0.674 |\n\n## Click history:\n\n1. Family of Navy SEAL Trainee Who Died During Pool Exercise Plans to Take Legal Action\n2. North Korea Vows to Strengthen Nuclear Weapons\n3. North Korea Threatens 'Toughest Counteraction' After U.S. Moves Navy Ships\n4. Consumer Reports Pulls Recommendation for Microsoft Surface Laptops\n\nCandidate news: Trump Announces Gunman Dead, Credits 'Heroic Actions' of Police\n\n<!-- image -->\n\nFigure 8: Visualization of relevance probabilities for a randomly sampled user w.r.t. a piece of candidate news with label 1 . Links with value lower than -1 . 0 are omitted.\n\nfrom which we observe that with the increase of the size of ripple set, the performance of RippleNet is improved at first because a larger ripple set can encode more knowledge from the KG. But notice that the performance drops when the size is too large. In general, a size of 16 or 32 is enough for most datasets according to the experiment results.\n\nHop number . We also vary the maximal hop number H to see how performance changes in RippleNet. The results are shown in Table 5, which shows that the best performance is achieved when H is 2 or 3. We attribute the phenomenon to the trade-off between the positive signals from long-distance dependency and negative signals from noises: too small of an H can hardly explore interentity relatedness and dependency of long distance, while too large of an H brings much more noises than useful signals, as stated in Section 4.4.\n\n## 4.6 Case Study\n\nTo intuitively demonstrate the preference propagation in RippleNet, we randomly sample a user with 4 clicked pieces of news, and select one candidate news from his test set with label 1. For each of the user's k -hop relevant entities, we calculate the (unnormalized) relevance probability between the entity and the candidate news or its k -order responses. The results are presented in Figure 8, in which\n\n(a) Dimension of embedding (b) Training weight of KGE term Figure 9: Parameter sensitivity of RippleNet.\n\n<!-- image -->\n\n<!-- image -->\n\nthe darker shade of blue indicates larger values, and we omit names of relations for clearer presentation. From Figure 8 we observe that RippleNet associates the candidate news with the user's relevant entities with different strengths. The candidate news can be reached via several paths in the KG with high weights from the user's click history, such as \"Navy SEAL\"-\"Special Forces\"-\"Gun\"-\"Police\". These highlighted paths automatically discovered by preference propagation can thus be used to explain the recommendation result, as discussed in Section 3.5.1. Additionally, it is also worth noticing that several entities in the KG receive more intensive attention from the user's history, such as \"U.S.\", \"World War II\" and \"Donald Trump\". These central entities result from the ripple superposition discussed in Section 3.5.2, and can serve as the user's potential interests for future recommendation.\n\n## 4.7 Parameter Sensitivity\n\nIn this section, we investigate the influence of parameters d and λ 2 in RippleNet. We vary d from 2 to 64 and λ 2 from 0 . 0 to 1 . 0, respectively, while keeping other parameters fixed. The results of AUC on MovieLens-1M are presented in Figure 9. We observe from Figure 9a that, with the increase of d , the performance is boosted at first since embeddings with a larger dimension can encode more useful information, but drops after d = 16 due to possible overfitting. From Figure 9b, we can see that RippleNet achieves the best performance when λ 2 = 0 . 01. This is because the KGEtermwithasmall weight cannot provide enough regularization constraints, while a large weight will mislead the objective function.\n\n## 5 CONCLUSION AND FUTURE WORK\n\nIn this paper, we propose RippleNet, an end-to-end framework that naturally incorporates the knowledge graph into recommender systems. RippleNet overcomes the limitations of existing embeddingbased and path-based KG-aware recommendation methods by introducing preference propagation, which automatically propagates users' potential preferences and explores their hierarchical interests in the KG. RippleNet unifies the preference propagation with regularization of KGE in a Bayesian framework for click-through rate prediction. We conduct extensive experiments in three recommendation scenarios. The results demonstrate the significant superiority of RippleNet over strong baselines.\n\nFor future work, we plan to (1) further investigate the methods of characterizing entity-relation interactions; (2) design non-uniform samplers during preference propagation to better explore users' potential interests and improve the performance.\n\n## REFERENCES\n\n- [1] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. 2014. Neural machine translation by jointly learning to align and translate. arXiv preprint arXiv:1409.0473 (2014).\n- [2] Konstantin Bauman, Bing Liu, and Alexander Tuzhilin. 2017. Aspect based recommendations: Recommending items with the most valuable aspects based on user reviews. In Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining . ACM, 717-725.\n- [3] Antoine Bordes, Nicolas Usunier, Alberto Garcia-Duran, Jason Weston, and Oksana Yakhnenko. 2013. Translating embeddings for modeling multi-relational data. In Advances in Neural Information Processing Systems . 2787-2795.\n- [4] Jingyuan Chen, Hanwang Zhang, Xiangnan He, Liqiang Nie, Wei Liu, and TatSeng Chua. 2017. Attentive collaborative filtering: Multimedia recommendation with item-and component-level attention. In SIGIR . ACM, 335-344.\n- [5] Xu Chen, Hongteng Xu, Yongfeng Zhang, Jiaxi Tang, Yixin Cao, Zheng Qin, and Hongyuan Zha. 2018. Sequential Recommendation with User Memory Networks. In Proceedings of the 11th ACM International Conference on Web Search and Data Mining .\n- [6] Heng-Tze Cheng, Levent Koc, Jeremiah Harmsen, Tal Shaked, Tushar Chandra, Hrishi Aradhye, Glen Anderson, Greg Corrado, Wei Chai, Mustafa Ispir, et al. 2016. Wide &amp; deep learning for recommender systems. In Proceedings of the 1st Workshop on Deep Learning for Recommender Systems . ACM, 7-10.\n- [7] Li Dong, Furu Wei, Ming Zhou, and Ke Xu. 2015. Question Answering over Freebase with Multi-Column Convolutional Neural Networks. In ACL . 260-269.\n- [8] Haoran Huang, Qi Zhang, and Xuanjing Huang. 2017. Mention Recommendation for Twitter with End-to-end Memory Network. In IJCAI .\n- [9] Mohsen Jamali and Martin Ester. 2010. A matrix factorization technique with trust propagation for recommendation in social networks. In Proceedings of the 4th ACM conference on Recommender systems . ACM, 135-142.\n- [10] Guoliang Ji, Shizhu He, Liheng Xu, Kang Liu, and Jun Zhao. 2015. Knowledge graph embedding via dynamic mapping matrix. In Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing (Volume 1: Long Papers) , Vol. 1. 687-696.\n- [11] Yehuda Koren. 2008. Factorization meets the neighborhood: a multifaceted collaborative filtering model. In Proceedings of the 14th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining . ACM, 426-434.\n- [12] Yehuda Koren, Robert Bell, and Chris Volinsky. 2009. Matrix factorization techniques for recommender systems. Computer 42, 8 (2009).\n- [13] Zheng Li, Yu Zhang, Ying Wei, Yuxiang Wu, and Qiang Yang. 2017. End-to-End Adversarial Memory Network for Cross-domain Sentiment Classification. In Proceedings of the 26th International Joint Conference on Artificial Intelligence .\n- [14] Yankai Lin, Zhiyuan Liu, Maosong Sun, Yang Liu, and Xuan Zhu. 2015. Learning Entity and Relation Embeddings for Knowledge Graph Completion. In AAAI . 2181-2187.\n- [15] Hanxiao Liu, Yuexin Wu, and Yiming Yang. 2017. Analogical Inference for MultiRelational Embeddings. In Proceedings of the 34th International Conference on Machine Learning . 2168-2178.\n- [16] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeff Dean. 2013. Distributed representations of words and phrases and their compositionality. In Advances in Neural Information Processing Systems . 3111-3119.\n- [17] Alexander Miller, Adam Fisch, Jesse Dodge, Amir-Hossein Karimi, Antoine Bordes, and Jason Weston. 2016. Key-value memory networks for directly reading documents. arXiv preprint arXiv:1606.03126 (2016).\n- [18] Volodymyr Mnih, Nicolas Heess, Alex Graves, et al. 2014. Recurrent models of visual attention. In Advances in Neural Information Processing Systems . 2204-2212.\n- [19] Maximilian Nickel, Lorenzo Rosasco, Tomaso A Poggio, et al. 2016. Holographic Embeddings of Knowledge Graphs. In AAAI . 1955-1961.\n- [20] Steffen Rendle. 2012. Factorization machines with libfm. ACM Transactions on Intelligent Systems and Technology (TIST) 3, 3 (2012), 57.\n- [21] Tim Rocktäschel, Sameer Singh, and Sebastian Riedel. 2015. Injecting logical background knowledge into embeddings for relation extraction. In Proceedings of the 2015 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies . 1119-1129.\n- [22] Sungyong Seo, Jing Huang, Hao Yang, and Yan Liu. 2017. Interpretable convolutional neural networks with dual local and global attention for review rating prediction. In Proceedings of the Eleventh ACM Conference on Recommender Systems . ACM, 297-305.\n- [23] Amit Sharma and Dan Cosley. 2013. Do social explanations work?: studying and modeling the effects of social explanations in recommender systems. In Proceedings of the 22nd international conference on World Wide Web . ACM, 11331144.\n- [24] Sainbayar Sukhbaatar, Jason Weston, Rob Fergus, et al. 2015. End-to-end memory networks. In Advances in Neural Information Processing Systems . 2440-2448.\n- [25] Yu Sun, Nicholas Jing Yuan, Xing Xie, Kieran McDonald, and Rui Zhang. 2017. Collaborative Intent Prediction with Real-Time Contextual Data. ACM Transactions on Information Systems 35, 4 (2017), 30.\n- [26] Kai Sheng Tai, Richard Socher, and Christopher D Manning. 2015. Improved Semantic Representations From Tree-Structured Long Short-Term Memory Networks. In Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing (Volume 1: Long Papers) , Vol. 1. 1556-1566.\n- [27] Nava Tintarev and Judith Masthoff. 2007. A survey of explanations in recommender systems. In IEEE 23rd International Conference on Data Engineering Workshop . IEEE, 801-810.\n- [28] Théo Trouillon, Johannes Welbl, Sebastian Riedel, Éric Gaussier, and Guillaume Bouchard. 2016. Complex embeddings for simple link prediction. In International Conference on Machine Learning . 2071-2080.\n- [29] Jesse Vig, Shilad Sen, and John Riedl. 2009. Tagsplanations: explaining recommendations using tags. In Proceedings of the 14th international conference on Intelligent user interfaces . ACM, 47-56.\n- [30] Hongwei Wang, Jia Wang, Jialin Wang, Miao Zhao, Weinan Zhang, Fuzheng Zhang, Xing Xie, and Minyi Guo. 2018. Graphgan: Graph representation learning with generative adversarial nets. In AAAI . 2508-2515.\n- [31] Hongwei Wang, Jia Wang, Miao Zhao, Jiannong Cao, and Minyi Guo. 2017. Joint Topic-Semantic-aware Social Recommendation for Online Voting. In Proceedings of the 2017 ACM Conference on Information and Knowledge Management . ACM, 347-356.\n- [32] Hongwei Wang, Fuzheng Zhang, Min Hou, Xing Xie, Minyi Guo, and Qi Liu. 2018. Shine: Signed heterogeneous information network embedding for sentiment link prediction. In Proceedings of the Eleventh ACM International Conference on Web Search and Data Mining . ACM, 592-600.\n- [33] Hongwei Wang, Fuzheng Zhang, Xing Xie, and Minyi Guo. 2018. DKN: Deep Knowledge-Aware Network for News Recommendation. In Proceedings of the 2018 World Wide Web Conference on World Wide Web . International World Wide Web Conferences Steering Committee, 1835-1844.\n- [34] Jin Wang, Zhongyuan Wang, Dawei Zhang, and Jun Yan. 2017. Combining Knowledge with Deep Convolutional Neural Networks for Short Text Classification. In IJCAI .\n- [35] Quan Wang, Zhendong Mao, Bin Wang, and Li Guo. 2017. Knowledge graph embedding: A survey of approaches and applications. IEEE Transactions on Knowledge and Data Engineering 29, 12 (2017), 2724-2743.\n- [36] Xuejian Wang, Lantao Yu, Kan Ren, Guanyu Tao, Weinan Zhang, Yong Yu, and Jun Wang. 2017. Dynamic attention deep model for article recommendation by learning human editors' demonstration. In Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining . ACM, 20512059.\n- [37] Zhen Wang, Jianwen Zhang, Jianlin Feng, and Zheng Chen. 2014. Knowledge Graph Embedding by Translating on Hyperplanes. In AAAI . 1112-1119.\n- [38] Jason Weston, Sumit Chopra, and Antoine Bordes. 2014. Memory networks. arXiv preprint arXiv:1410.3916 (2014).\n- [39] Ruobing Xie, Zhiyuan Liu, and Maosong Sun. 2016. Representation Learning of Knowledge Graphs with Hierarchical Types.. In IJCAI . 2965-2971.\n- [40] Chang Xu, Yalong Bai, Jiang Bian, Bin Gao, Gang Wang, Xiaoguang Liu, and Tie-Yan Liu. 2014. Rc-net: A general framework for incorporating knowledge into word representations. In Proceedings of the 23rd ACM International Conference on Conference on Information and Knowledge Management . ACM, 1219-1228.\n- [41] Bishan Yang, Wen-tau Yih, Xiaodong He, Jianfeng Gao, and Li Deng. 2015. Embedding entities and relations for learning and inference in knowledge bases. In Proceedings of the 3rd International Conference on Learning Representations .\n- [42] Xiao Yu, Xiang Ren, Yizhou Sun, Quanquan Gu, Bradley Sturt, Urvashi Khandelwal, Brandon Norick, and Jiawei Han. 2014. Personalized entity recommendation: A heterogeneous information network approach. In Proceedings of the 7th ACM International Conference on Web Search and Data Mining . 283-292.\n- [43] Fuzheng Zhang, Nicholas Jing Yuan, Defu Lian, Xing Xie, and Wei-Ying Ma. 2016. Collaborative knowledge base embedding for recommender systems. In Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining . ACM, 353-362.\n- [44] Yongfeng Zhang, Guokun Lai, Min Zhang, Yi Zhang, Yiqun Liu, and Shaoping Ma. 2014. Explicit factor models for explainable recommendation based on phrase-level sentiment analysis. In Proceedings of the 37th international ACM SIGIR conference on Research &amp; development in information retrieval . ACM, 83-92.\n- [45] Huan Zhao, Quanming Yao, Jianda Li, Yangqiu Song, and Dik Lun Lee. 2017. Metagraph based recommendation fusion over heterogeneous information networks. In Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining . ACM, 635-644.\n- [46] Huaping Zhong, Jianwen Zhang, Zhen Wang, Hai Wan, and Zheng Chen. 2015. Aligning knowledge and text embeddings by entity descriptions. In Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing . 267-272.\n- [47] Guorui Zhou, Chengru Song, Xiaoqiang Zhu, Xiao Ma, Yanghui Yan, Xingya Dai, Han Zhu, Junqi Jin, Han Li, and Kun Gai. 2017. Deep interest network for click-through rate prediction. arXiv preprint arXiv:1706.06978 (2017)."
                }
            ]
        },
        {
            "id": "198e57a37bb0a8a6",
            "from": "Duyen Nguyen Thi <nguyenthiduyen1_t65@hus.edu.vn>",
            "to": "Nguyen Duyen <dynjjeo@gmail.com>",
            "subject": "Re: TEST",
            "date": "2025-08-26 08:23:56+00:00",
            "plain_text": "I Want IT[image: Screenshot 2025-07-23 064204.png]\r\n\r\nVào Th 3, 26 thg 8, 2025 vào lúc 15:22 Nguyen Duyen <dynjjeo@gmail.com>\r\nđã viết:\r\n\r\n> thanks for contacting me. the project is paid. along with the code u will\r\n> \\r\\nget all documents and base paper. let me know if you want it.\r\n>\r\n",
            "cc": [],
            "bcc": [],
            "labels_ids": [
                "IMPORTANT",
                "CATEGORY_PERSONAL",
                "INBOX"
            ],
            "attachments": [
                {
                    "filename": "Screenshot 2025-07-23 064204.png",
                    "file_path": "outputs/198e572acc4c31ff_TEST/Screenshot 2025-07-23 064204.png",
                    "attachment_context": null
                }
            ]
        }
    ]
}